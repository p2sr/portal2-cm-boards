<?xml version="1.0" encoding="UTF-8" ?>
<project name="p2boards" id="Project_550" database="PostgreSQL" >
	<schema name="db remake" >
		<table name="categories" prior="tbl" >
			<comment><![CDATA[Table to hold information on categories.]]></comment>
			<column name="id" type="serial" jt="4" mandatory="y" >
				<comment><![CDATA[The primary key for categories]]></comment>
			</column>
			<column name="name" type="varchar" length="100" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[The name of the category]]></comment>
			</column>
			<column name="map_id" type="varchar" length="6" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[The associated map_id]]></comment>
			</column>
			<column name="rules" type="varchar" length="1000" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[A string of the ruleset for the category]]></comment>
			</column>
			<index name="pk_categories_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="changelog" prior="tbl" >
			<comment><![CDATA[The table to hold an individual score update and all its details]]></comment>
			<column name="id" type="bigserial" jt="-5" mandatory="y" >
				<comment><![CDATA[The auto-generated ID for the changelog table]]></comment>
			</column>
			<column name="timestamp" type="timestamp" length="12" jt="93" >
				<comment><![CDATA[Formerly (time_gained), Naive UTC time.
Can be NULL because of times added after initial creation of DB.]]></comment>
			</column>
			<column name="profile_number" type="varchar" length="50" jt="12" mandatory="y" >
				<comment><![CDATA[Associated with a Steam ID number. Used as the primary key for users.]]></comment>
			</column>
			<column name="score" type="integer" jt="4" mandatory="y" >
				<comment><![CDATA[The int value of the time the user got on.]]></comment>
			</column>
			<column name="map_id" type="varchar" length="6" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[ID associated with the map on Steam.]]></comment>
			</column>
			<column name="demo_id" prior="has_demo" type="bigint" jt="-5" >
				<comment><![CDATA[Foreign key for demos table.]]></comment>
			</column>
			<column name="banned" type="boolean" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Is the entry banned?]]></comment>
			</column>
			<column name="youtube_id" type="varchar" length="30" jt="12" >
				<comment><![CDATA[Youtube URL]]></comment>
			</column>
			<column name="previous_id" type="integer" jt="4" >
				<comment><![CDATA[Changelog ID of the previous score from the user.]]></comment>
			</column>
			<column name="coop_id" type="bigint" jt="-5" >
				<comment><![CDATA[Foreign key for a coop time. Links two different scores together.]]></comment>
			</column>
			<column name="post_rank" type="integer" jt="4" >
				<comment><![CDATA[New rank at time of score update.]]></comment>
			</column>
			<column name="pre_rank" type="integer" jt="4" >
				<comment><![CDATA[Rank your previous time ended at when this score update was added.]]></comment>
			</column>
			<column name="submission" type="boolean" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Was this run manually submitted?]]></comment>
			</column>
			<column name="note" type="varchar" length="100" jt="12" >
				<comment><![CDATA[Comment a user can leave on their score.]]></comment>
			</column>
			<column name="category_id" prior="category" type="integer" length="100" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
				<comment><![CDATA[The category associated with the score.]]></comment>
			</column>
			<column name="score_delta" type="integer" jt="4" >
				<comment><![CDATA[The time score difference between this PB and the last]]></comment>
			</column>
			<column name="verified" prior="mod_reviewed" type="boolean" jt="-7" >
				<comment><![CDATA[Has this run been reviewed by admins? (yes -> true, no -> false, n/a -> NULL)]]></comment>
			</column>
			<column name="admin_note" type="varchar" length="200" jt="12" >
				<comment><![CDATA[Note that can be left by an admin]]></comment>
			</column>
			<index name="pk_changelog_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="fk_changelog_users" to_schema="db remake" to_table="users" >
				<fk_column name="profile_number" pk="profile_number" />
			</fk>
			<fk name="fk_changelog_maps" to_schema="db remake" to_table="maps" >
				<fk_column name="map_id" pk="steam_id" />
			</fk>
			<fk name="fk_changelog_coop_bundled" to_schema="db remake" to_table="coop_bundled" >
				<fk_column name="coop_id" pk="id" />
			</fk>
			<fk name="fk_changelog_demos" to_schema="db remake" to_table="demos" >
				<fk_column name="demo_id" pk="id" />
			</fk>
			<fk name="fk_changelog_categories" to_schema="db remake" to_table="categories" >
				<fk_column name="category_id" pk="id" />
			</fk>
		</table>
		<table name="chapters" prior="tbl" >
			<comment><![CDATA[Chapters in the game]]></comment>
			<column name="id" type="serial" jt="4" mandatory="y" />
			<column name="chapter_name" type="varchar" length="50" jt="12" >
				<comment><![CDATA[The in-game name of the chapter.]]></comment>
			</column>
			<column name="is_multiplayer" type="boolean" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Is the chapter multiplayer?]]></comment>
			</column>
			<column name="game_id" prior="game" type="integer" length="50" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
				<comment><![CDATA[The game the chapter is associated with]]></comment>
			</column>
			<index name="pk_chapters_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="fk_chapters_game_id" to_schema="db remake" to_table="games" >
				<fk_column name="game_id" pk="id" />
			</fk>
		</table>
		<table name="coop_bundled" prior="tbl" >
			<comment><![CDATA[The bundling of two changelog entries, two profiles and additional multiplayer-specific coop details.]]></comment>
			<column name="id" type="bigserial" jt="-5" mandatory="y" />
			<column name="p_id1" type="varchar" length="50" jt="12" mandatory="y" >
				<comment><![CDATA[Profile number for player 1.]]></comment>
			</column>
			<column name="p_id2" type="varchar" length="50" jt="12" >
				<comment><![CDATA[Profile number for player 2 (can be null)]]></comment>
			</column>
			<column name="p1_is_host" prior="is_host" type="boolean" jt="-7" >
				<comment><![CDATA[Is the player blue (atlas), or the host?]]></comment>
			</column>
			<column name="cl_id1" type="bigint" jt="-5" mandatory="y" >
				<comment><![CDATA[Changelog ID for the first player.]]></comment>
			</column>
			<column name="cl_id2" type="bigint" jt="-5" >
				<comment><![CDATA[Changelog ID for player 2 (can be NULL)]]></comment>
			</column>
			<index name="pk_coop_bundled_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="fk_coop_bundled_cl_id1" to_schema="db remake" to_table="changelog" >
				<fk_column name="cl_id1" pk="id" />
			</fk>
			<fk name="fk_coop_bundled_chapters_cl_id2" to_schema="db remake" to_table="changelog" options="" >
				<fk_column name="cl_id2" pk="id" />
			</fk>
			<fk name="fk_coop_bundled_users_u1" to_schema="db remake" to_table="users" >
				<fk_column name="p_id1" pk="profile_number" />
			</fk>
			<fk name="fk_coop_bundled_users_u2" to_schema="db remake" to_table="users" >
				<fk_column name="p_id2" pk="profile_number" />
			</fk>
		</table>
		<table name="demos" prior="demo" >
			<column name="id" type="bigserial" jt="-5" mandatory="y" >
				<comment><![CDATA[Demo ID]]></comment>
			</column>
			<column name="drive_url" type="varchar" length="100" jt="12" mandatory="y" >
				<comment><![CDATA[The URL to the corresponding Drive link]]></comment>
			</column>
			<column name="partner_name" type="varchar" length="50" jt="12" >
				<comment><![CDATA[NULL if coop]]></comment>
			</column>
			<column name="parsed_successfully" type="boolean" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Boolean for if the demo was able to parse successfully.]]></comment>
			</column>
			<column name="sar_version" type="varchar" length="50" jt="12" >
				<comment><![CDATA[Holds the version of SAR used]]></comment>
			</column>
			<column name="cl_id" type="bigint" jt="-5" mandatory="y" >
				<comment><![CDATA[Changelog ID associated with the demo]]></comment>
			</column>
			<index name="unq_demos_id" unique="UNIQUE_KEY" >
				<column name="id" />
			</index>
			<fk name="fk_demos_changelog" to_schema="db remake" to_table="changelog" >
				<fk_column name="cl_id" pk="id" />
			</fk>
		</table>
		<table name="games" prior="game" >
			<comment><![CDATA[Table for different games]]></comment>
			<column name="id" type="serial" jt="4" mandatory="y" />
			<column name="game_name" type="varchar" length="50" jt="12" mandatory="y" >
				<defo><![CDATA['Portal 2']]></defo>
				<comment><![CDATA[The name of the associated game]]></comment>
			</column>
			<index name="pk_game_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="maps" prior="tbl" >
			<comment><![CDATA[Table to represent maps in the game.]]></comment>
			<column name="id" type="serial" jt="4" mandatory="y" />
			<column name="steam_id" type="varchar" length="6" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[ID given the map on Steam]]></comment>
			</column>
			<column name="lp_id" type="varchar" length="6" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[Least Portals value assigned by Steam (might as well bring over lol)]]></comment>
			</column>
			<column name="name" type="varchar" length="50" jt="12" mandatory="y" >
				<comment><![CDATA[Name of the map]]></comment>
			</column>
			<column name="chapter_id" type="integer" jt="4" >
				<comment><![CDATA[ID for the chapter]]></comment>
			</column>
			<column name="is_public" type="boolean" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Can we still access public Steam API?]]></comment>
			</column>
			<index name="pk_maps_id" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="unq_maps_steam_id" unique="UNIQUE_KEY" >
				<column name="steam_id" />
			</index>
			<fk name="fk_maps_chapters" to_schema="db remake" to_table="chapters" >
				<fk_column name="chapter_id" pk="id" />
			</fk>
		</table>
		<table name="users" prior="tbl" >
			<comment><![CDATA[Table with all user data.]]></comment>
			<column name="profile_number" type="varchar" length="50" jt="12" mandatory="y" >
				<defo><![CDATA['']]></defo>
				<comment><![CDATA[Steam ID associated with the user. Primary key]]></comment>
			</column>
			<column name="board_name" type="varchar" length="50" jt="12" >
				<comment><![CDATA[Name of the user on the boards.]]></comment>
			</column>
			<column name="steam_name" type="varchar" length="50" jt="12" >
				<comment><![CDATA[Name of the user pulled from Steam]]></comment>
			</column>
			<column name="banned" type="boolean" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Is the time banned?]]></comment>
			</column>
			<column name="registered" type="integer" jt="4" mandatory="y" >
				<defo><![CDATA[0]]></defo>
				<comment><![CDATA[Is the user registered (unsure of purpose).]]></comment>
			</column>
			<column name="avatar" type="varchar" length="200" jt="12" >
				<comment><![CDATA[Link to profile picture.]]></comment>
			</column>
			<column name="twitch" type="varchar" length="100" jt="12" >
				<comment><![CDATA[Twitch URL]]></comment>
			</column>
			<column name="youtube" type="varchar" length="100" jt="12" >
				<comment><![CDATA[Youtube URL]]></comment>
			</column>
			<column name="title" type="varchar" length="200" jt="12" >
				<comment><![CDATA[Customer user title to be displayed on their user page.]]></comment>
			</column>
			<column name="admin" type="integer" jt="4" mandatory="y" >
				<defo><![CDATA[0]]></defo>
				<comment><![CDATA[Kept as integer for potential "shadow admin" role. 0 can be non-admin, anything higher can have admin perms, only `1` will be displayed as admin?? Could be dumb, at request of Rex.]]></comment>
			</column>
			<column name="donation_amount" type="varchar" length="11" jt="12" >
				<comment><![CDATA[Amount donated to the server.]]></comment>
			</column>
			<column name="discord_id" type="varchar" length="40" jt="12" >
				<comment><![CDATA[User's Discord ID]]></comment>
			</column>
			<index name="pk_users_profile_number" unique="PRIMARY_KEY" >
				<column name="profile_number" />
			</index>
		</table>
	</schema>
	<layout name="Default Layout" id="Layout_1061" show_relation="columns" >
		<entity schema="db remake" name="categories" color="C1D8EE" x="288" y="608" />
		<entity schema="db remake" name="changelog" color="C1D8EE" x="48" y="48" />
		<entity schema="db remake" name="chapters" color="C1D8EE" x="464" y="224" />
		<entity schema="db remake" name="coop_bundled" color="C1D8EE" x="496" y="48" />
		<entity schema="db remake" name="demos" color="C1D8EE" x="64" y="576" />
		<entity schema="db remake" name="games" color="C1D8EE" x="288" y="416" />
		<entity schema="db remake" name="maps" color="C1D8EE" x="432" y="576" />
		<entity schema="db remake" name="users" color="C1D8EE" x="256" y="144" />
		<script name="SQL_Editor" id="Editor_1e7c" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS "db remake";

CREATE  TABLE "db remake".categories ( 
	id                   serial  NOT NULL ,
	name                 varchar(100) DEFAULT '' NOT NULL ,
	map_id               varchar(6) DEFAULT '' NOT NULL ,
	rules                varchar(1000) DEFAULT '' NOT NULL ,
	CONSTRAINT pk_categories_id PRIMARY KEY ( id )
 );

COMMENT ON TABLE "db remake".categories IS 'Table to hold information on categories.';

COMMENT ON COLUMN "db remake".categories.id IS 'The primary key for categories';

COMMENT ON COLUMN "db remake".categories.name IS 'The name of the category';

COMMENT ON COLUMN "db remake".categories.map_id IS 'The associated map_id';

COMMENT ON COLUMN "db remake".categories.rules IS 'A string of the ruleset for the category';

CREATE  TABLE "db remake".games ( 
	id                   serial  NOT NULL ,
	game_name            varchar(50) DEFAULT 'Portal 2' NOT NULL ,
	CONSTRAINT pk_game_id PRIMARY KEY ( id )
 );

COMMENT ON TABLE "db remake".games IS 'Table for different games';

COMMENT ON COLUMN "db remake".games.game_name IS 'The name of the associated game';

CREATE  TABLE "db remake".users ( 
	profile_number       varchar(50) DEFAULT '' NOT NULL ,
	board_name           varchar(50)   ,
	steam_name           varchar(50)   ,
	banned               boolean DEFAULT false NOT NULL ,
	registered           integer DEFAULT 0 NOT NULL ,
	avatar               varchar(200)   ,
	twitch               varchar(100)   ,
	youtube              varchar(100)   ,
	title                varchar(200)   ,
	"admin"              integer DEFAULT 0 NOT NULL ,
	donation_amount      varchar(11)   ,
	discord_id           varchar(40)   ,
	CONSTRAINT pk_users_profile_number PRIMARY KEY ( profile_number )
 );

COMMENT ON TABLE "db remake".users IS 'Table with all user data.';

COMMENT ON COLUMN "db remake".users.profile_number IS 'Steam ID associated with the user. Primary key';

COMMENT ON COLUMN "db remake".users.board_name IS 'Name of the user on the boards.';

COMMENT ON COLUMN "db remake".users.steam_name IS 'Name of the user pulled from Steam';

COMMENT ON COLUMN "db remake".users.banned IS 'Is the time banned?';

COMMENT ON COLUMN "db remake".users.registered IS 'Is the user registered (unsure of purpose).';

COMMENT ON COLUMN "db remake".users.avatar IS 'Link to profile picture.';

COMMENT ON COLUMN "db remake".users.twitch IS 'Twitch URL';

COMMENT ON COLUMN "db remake".users.youtube IS 'Youtube URL';

COMMENT ON COLUMN "db remake".users.title IS 'Customer user title to be displayed on their user page.';

COMMENT ON COLUMN "db remake".users."admin" IS 'Kept as integer for potential "shadow admin" role. 0 can be non-admin, anything higher can have admin perms, only `1` will be displayed as admin?? Could be dumb, at request of Rex.';

COMMENT ON COLUMN "db remake".users.donation_amount IS 'Amount donated to the server.';

COMMENT ON COLUMN "db remake".users.discord_id IS 'User''s Discord ID';

CREATE  TABLE "db remake".chapters ( 
	id                   serial  NOT NULL ,
	chapter_name         varchar(50)   ,
	is_multiplayer       boolean DEFAULT false NOT NULL ,
	game                 integer DEFAULT 1 NOT NULL ,
	CONSTRAINT pk_chapters_id PRIMARY KEY ( id ),
	CONSTRAINT fk_chapters_game FOREIGN KEY ( game ) REFERENCES "db remake".games( id )   
 );

COMMENT ON TABLE "db remake".chapters IS 'Chapters in the game';

COMMENT ON COLUMN "db remake".chapters.chapter_name IS 'The in-game name of the chapter.';

COMMENT ON COLUMN "db remake".chapters.is_multiplayer IS 'Is the chapter multiplayer?';

COMMENT ON COLUMN "db remake".chapters.game IS 'The game the chapter is associated with';

CREATE  TABLE "db remake".maps ( 
	id                   serial  NOT NULL ,
	steam_id             varchar(6) DEFAULT '' NOT NULL ,
	lp_id                varchar(6) DEFAULT '' NOT NULL ,
	name                 varchar(50)  NOT NULL ,
	chapter_id           integer   ,
	is_public            boolean DEFAULT false NOT NULL ,
	CONSTRAINT pk_maps_id PRIMARY KEY ( id ),
	CONSTRAINT unq_maps_steam_id UNIQUE ( steam_id ) ,
	CONSTRAINT fk_maps_chapters FOREIGN KEY ( chapter_id ) REFERENCES "db remake".chapters( id )   
 );

COMMENT ON TABLE "db remake".maps IS 'Table to represent maps in the game.';

COMMENT ON COLUMN "db remake".maps.steam_id IS 'ID given the map on Steam';

COMMENT ON COLUMN "db remake".maps.lp_id IS 'Least Portals value assigned by Steam (might as well bring over lol)';

COMMENT ON COLUMN "db remake".maps.name IS 'Name of the map';

COMMENT ON COLUMN "db remake".maps.chapter_id IS 'ID for the chapter';

COMMENT ON COLUMN "db remake".maps.is_public IS 'Can we still access public Steam API?';

CREATE  TABLE "db remake".changelog ( 
	id                   bigserial  NOT NULL ,
	"timestamp"          timestamp(12)   ,
	profile_number       varchar(50)  NOT NULL ,
	score                integer  NOT NULL ,
	map_id               varchar(6) DEFAULT '' NOT NULL ,
	demo_id              bigint   ,
	banned               boolean DEFAULT false NOT NULL ,
	youtube_id           varchar(30)   ,
	previous_id          integer   ,
	coop_id              bigint   ,
	post_rank            integer   ,
	pre_rank             integer   ,
	submission           boolean DEFAULT false NOT NULL ,
	note                 varchar(100)   ,
	category_id          integer DEFAULT 1 NOT NULL ,
	score_delta          integer   ,
	verified             boolean   ,
	admin_note           varchar(200)   ,
	CONSTRAINT pk_changelog_id PRIMARY KEY ( id )
 );

COMMENT ON TABLE "db remake".changelog IS 'The table to hold an individual score update and all it''s details';

COMMENT ON COLUMN "db remake".changelog.id IS 'The auto-generated ID for the changelog table';

COMMENT ON COLUMN "db remake".changelog."timestamp" IS 'Formerly (time_gained), Naive UTC time.\nCan be NULL because of times added after initial creation of DB.';

COMMENT ON COLUMN "db remake".changelog.profile_number IS 'Associated with a Steam ID number. Used as the primary key for users.';

COMMENT ON COLUMN "db remake".changelog.score IS 'The int value of the time the user got on.';

COMMENT ON COLUMN "db remake".changelog.map_id IS 'ID associated with the map on Steam.';

COMMENT ON COLUMN "db remake".changelog.demo_id IS 'Foreign key for demos table.';

COMMENT ON COLUMN "db remake".changelog.banned IS 'Is the entry banned?';

COMMENT ON COLUMN "db remake".changelog.youtube_id IS 'Youtube URL';

COMMENT ON COLUMN "db remake".changelog.previous_id IS 'Changelog ID of the previous score from the user.';

COMMENT ON COLUMN "db remake".changelog.coop_id IS 'Foreign key for a coop time. Links two different scores together.';

COMMENT ON COLUMN "db remake".changelog.post_rank IS 'New rank at time of score update.';

COMMENT ON COLUMN "db remake".changelog.pre_rank IS 'Rank your previous time ended at when this score update was added.';

COMMENT ON COLUMN "db remake".changelog.submission IS 'Was this run manually submitted?';

COMMENT ON COLUMN "db remake".changelog.note IS 'Comment a user can leave on their score.';

COMMENT ON COLUMN "db remake".changelog.category_id IS 'The category associated with the score.';

COMMENT ON COLUMN "db remake".changelog.score_delta IS 'The time score difference between this PB and the last';

COMMENT ON COLUMN "db remake".changelog.verified IS 'Has this run been reviewed by admins? (yes -> true, no -> false, n/a -> NULL)';

COMMENT ON COLUMN "db remake".changelog.admin_note IS 'Note that can be left by an admin';

CREATE  TABLE "db remake".coop_bundled ( 
	id                   bigserial  NOT NULL ,
	p_id1                varchar(50)  NOT NULL ,
	p_id2                varchar(50)   ,
	p1_is_host           boolean  NOT NULL ,
	cl_id1               bigint  NOT NULL ,
	cl_id2               bigint   ,
	CONSTRAINT pk_coop_bundled_id PRIMARY KEY ( id )
 );

COMMENT ON TABLE "db remake".coop_bundled IS 'The bundling of two changelog entries, two profiles and additional multiplayer-specific coop details.';

COMMENT ON COLUMN "db remake".coop_bundled.p_id1 IS 'Profile number for player 1.';

COMMENT ON COLUMN "db remake".coop_bundled.p_id2 IS 'Profile number for player 2 (can be null)';

COMMENT ON COLUMN "db remake".coop_bundled.p1_is_host IS 'Is the player blue (atlas), or the host?';

COMMENT ON COLUMN "db remake".coop_bundled.cl_id1 IS 'Changelog ID for the first player.';

COMMENT ON COLUMN "db remake".coop_bundled.cl_id2 IS 'Changelog ID for player 2 (can be NULL)';

CREATE  TABLE "db remake".demos ( 
	id                   bigserial  NOT NULL ,
	drive_url            varchar(100)  NOT NULL ,
	partner_name         varchar(50)   ,
	parsed_successfully  boolean DEFAULT false NOT NULL ,
	sar_version          varchar(50)  NOT NULL ,
	cl_id                bigint  NOT NULL ,
	CONSTRAINT unq_demos_id UNIQUE ( id ) 
 );

COMMENT ON COLUMN "db remake".demos.id IS 'Demo ID';

COMMENT ON COLUMN "db remake".demos.drive_url IS 'The URL to the corresponding Drive link';

COMMENT ON COLUMN "db remake".demos.partner_name IS 'NULL if coop';

COMMENT ON COLUMN "db remake".demos.parsed_successfully IS 'Boolean for if the demo was able to parse successfully.';

COMMENT ON COLUMN "db remake".demos.sar_version IS 'Holds the version of SAR used';

COMMENT ON COLUMN "db remake".demos.cl_id IS 'Changelog ID associated with the demo';

ALTER TABLE "db remake".changelog ADD CONSTRAINT fk_changelog_users FOREIGN KEY ( profile_number ) REFERENCES "db remake".users( profile_number );

ALTER TABLE "db remake".changelog ADD CONSTRAINT fk_changelog_maps FOREIGN KEY ( map_id ) REFERENCES "db remake".maps( steam_id );

ALTER TABLE "db remake".changelog ADD CONSTRAINT fk_changelog_coop_bundled FOREIGN KEY ( coop_id ) REFERENCES "db remake".coop_bundled( id );

ALTER TABLE "db remake".changelog ADD CONSTRAINT fk_changelog_demos FOREIGN KEY ( demo_id ) REFERENCES "db remake".demos( id );

ALTER TABLE "db remake".changelog ADD CONSTRAINT fk_changelog_categories FOREIGN KEY ( category_id ) REFERENCES "db remake".categories( id );

ALTER TABLE "db remake".coop_bundled ADD CONSTRAINT fk_coop_bundled_cl_id1 FOREIGN KEY ( cl_id1 ) REFERENCES "db remake".changelog( id );

ALTER TABLE "db remake".coop_bundled ADD CONSTRAINT fk_coop_bundled_chapters_cl_id2 FOREIGN KEY ( cl_id2 ) REFERENCES "db remake".changelog( id );

ALTER TABLE "db remake".coop_bundled ADD CONSTRAINT fk_coop_bundled_users_u1 FOREIGN KEY ( p_id1 ) REFERENCES "db remake".users( profile_number );

ALTER TABLE "db remake".coop_bundled ADD CONSTRAINT fk_coop_bundled_users_u2 FOREIGN KEY ( p_id2 ) REFERENCES "db remake".users( profile_number );

ALTER TABLE "db remake".demos ADD CONSTRAINT fk_demos_changelog FOREIGN KEY ( cl_id ) REFERENCES "db remake".changelog( id );]]></string>
		</script>
		<query id="Query_8ec" name="changelog" >
			<query_table schema="db remake" name="changelog" alias="c1" x="48" y="96" >
				<column name="timestamp" />
				<column name="profile_number" />
				<column name="score" />
				<column name="map_id" />
				<column name="demo_id" />
				<column name="banned" />
				<column name="youtube_id" />
				<column name="submission" />
				<column name="note" />
				<column name="category_id" />
				<column name="verified" />
				<column name="admin_note" />
				<column name="map_id" filter=":c = &#039;&quot;62758&quot;&#039;" />
				<column name="banned" filter=":c = 0" />
				<column name="score" orderby="desc" />
				<query_table schema="db remake" name="users" alias="u" x="272" y="48" fk="fk_changelog_users" type="Inner Join" >
					<column name="board_name" />
					<column name="steam_name" />
					<column name="banned" />
					<column name="avatar" />
					<column name="banned" filter=":c = 0" />
				</query_table>
				<query_table schema="db remake" name="maps" alias="m1" x="432" y="288" fk="fk_changelog_maps" type="Inner Join" >
					<column name="name" />
					<column name="is_public" />
					<query_table schema="db remake" name="chapters" alias="c2" x="608" y="304" fk="fk_maps_chapters" type="Inner Join" >
						<column name="game_id" />
					</query_table>
				</query_table>
				<query_table schema="db remake" name="categories" alias="c3" x="304" y="304" fk="fk_changelog_categories" type="Inner Join" >
					<column name="name" />
					<column name="rules" />
				</query_table>
			</query_table>
		</query>
	</layout>
</project>
